import re


class InputError(TypeError):
	pass


class Log:
	"""The parsed contents of a single line of Apache2 log file.
	Can be iterated over; has format:
	[ip, request, user_agent, status, referrer, timestamp]

	Attributes:
		ip: The IP that sent the request.
		request: The page requested. Sometimes preceded by a GET, POST, or similar request.
		user_agent: The User Agent String used to request the page.
		status: The HTTP status code returned to the requester by the server. May be set to None.
		referrer: The page that linked to the page being requested. May be set to None.
		timestamp: The time at which the log was created. May be set to None"""

	def __init__(self, original, ip, request, user_agent, status=None, referrer=None, timestamp=None):
		self.original = original
		self.ip = ip
		self.request = request
		self.status = status
		self.user_agent = user_agent
		self.referrer = referrer
		self.timestamp = timestamp

	def __iter__(self):
		return iter([self.ip, self.request, self.user_agent, self.status, self.referrer, self.timestamp])


class ParsedLogFile:
	"""The contents of a parsed Apache2 access log file.

	Attributes:
		origin: The name of the log file that was parsed.
		regex: The regular expression that was used to parse the log.
		logs: The data extracted from the log.
		invalids: The lines of the log file that could not be parsed.
		whitelist: IPs to be ignored when parsing logs."""

	whitelist = ['192.168.0.1', '127.0.0.1']

	def __init__(self, orig_file, regex, parsed, invalid):
		self.origin = orig_file
		self.regex = regex
		self.logs = parsed
		self.invalids = invalid
		self.whitelist = self.whitelist

	def whitelist_ips(self, ips):
		"""Adds ips (a list) to the whitelist.

		Arguments:
			ips: A list of IPs to be whitelisted."""
		self.whitelist += ips

	def get_ips(self):
		"""Returns all unique IP addresses in the parsed log file."""
		return list(set([i.ip for i in self.logs]))

	def get_foreign_logs(self):
		"""Returns a list of all log entries generated by IPs not on the whitelist."""
		return [i.original for i in self.logs if i.ip not in self.whitelist]

	def print_foreign_logs(self):
		"""Prints all log entries generated by IPs not on the whitelist."""
		for j in [i.original for i in self.logs if i.ip not in self.whitelist]:
			print(j)

	def get_foreign_requests(self):
		"""Returns a list of all the pages requested by IPs not on the whitelist."""
		return [i.request for i in self.logs if i.ip not in self.whitelist]

	def get_bad_requests(self):
		"""Returns a list of all requests that were returned a 4xx error from the server."""
		return [i.request for i in self.logs if str(i.status).startswith('4')]

	def get_requests_from_ip(self, ip):
		"""Returns a list of all requests made by ip."""
		return [i.request for i in self.logs if i.ip == ip]

	def get_bad_user_agents(self):
		"""Returns a list of all user agents that made bad requests."""
		return [i.user_agent for i in self.logs if i.status.startswith('4')]

	def get_foreign_ips(self):
		"""Returns a list of all IP addresses not in the whitelist."""
		return [i.ip for i in self.logs if i.ip not in self.whitelist]


def parse_file(filename, regex_mode):
	"""Parses and Apache2 log file (filename) using regex code (regex_mode).
	Returns a ParsedLog object.

	Regex Modes:
	'g' - Guess:
		Experimental! The script will attempt to guess the log format.
	'c' - Double-Colon Separated:
		DD::Weekday::HH::MM::IP::Request::User Agent::Referrer::
	's' - Standard Apache Combined:
		IP - - [DD/Mon/YYYY:HH:MM:SS Timezone] "Request" Response FileSize "Referrer" "User Agent" """
	colons = r'(\d+)::(\w+)::(\d+)::(\d+)::([(\d\.)]+)::(.*?)::(.*?)::(.*?)::'
	combined = r'([(\d\.)]+) - - \[(.*?)\] "(.*?)" ((\d+)|-) ((\d+)|-) "(.*?)" "(.*?)"'
	regex = ''
	guess = False
	logs = []
	invalid = []
	if regex_mode.lower() == 'g':
		guess = True
	elif regex_mode.lower() == 'c':
		regex = colons
	elif regex_mode.lower() == 's':
		regex = combined
	else:
		raise InputError("Invalid regex mode identifier.")
	with open(filename, 'r') as f:
		if guess:
			data = f.readline()
			if data[2] == ':' and data[3] == ':':
				regex = colons
			else:
				regex = combined
			f.seek(0)
		for line in f:
			try:
				log = list(re.search(regex, line).groups())
				if regex_mode.lower() == 'c':
					time = {'date': log[0], 'day': log[1], 'hour': log[2], 'minute': log[3]}
					logs.append(Log(line, log[4], log[5], [6], referrer=log[7], timestamp=time))
				elif regex_mode.lower() == 's':
					# The regex seems to duplicate the Response and FileSize, so log[4] and [6] are useless
					del log[4]
					del log[6]
					time = {
						'data': log[1][:2], 'month': log[1][3:6], 'year': log[7:11], 'hour': log[1][12:14],
						'minute': log[1][15:17], 'second': log[1][18:20]}
					logs.append(Log(line, log[0], log[2], log[6], status=log[3], referrer=log[5], timestamp=time))
			except AttributeError:
				invalid.append(line)

	return ParsedLogFile(filename, regex, logs, invalid)


def parse_log(filename, regex):
	"""Alias for parse_file(...)"""
	return parse_file(filename, regex)
